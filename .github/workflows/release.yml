name: Build and release bundle and docker image

on:
  release:
    types: [published]

env:
  NODE: '14.18.3'
  METEOR: '2.6.1'
  METEOR_BUNDLE: 'meteor-bundle.tar.gz'

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-20.04
    steps:
      - name: Checking repo out
        uses: actions/checkout@v1
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE }}
      - name: Install dependencies
        run: npm ci
      - name: Linting
        run: npm run lint

  test:
    name: Testing
    runs-on: ubuntu-20.04
    steps:
      - name: Checking repo out
        uses: actions/checkout@v1
      - name: Setup Meteor
        uses: meteorengineer/setup-meteor@v1
        with:
          meteor-release: ${{ env.METEOR }}
      - name: Install dependencies
        run: meteor npm install
      - name: Run tests
        run: npm run test

  build-meteor-bundle:
    name: Prepare Meteor Bundle and other artifacts
    runs-on: ubuntu-20.04
    needs: [lint, test]
    steps:
      - name: Checking repo out
        uses: actions/checkout@v1

      - name: Setup Meteor
        uses: meteorengineer/setup-meteor@v1
        with:
          meteor-release: ${{ env.METEOR }}

      - name: Install dependencies
        run: meteor npm install

      - name: Build application
        run: meteor build ../

      - name: Rename bundle file
        run: |
          mv ../${{ github.event.repository.name }}.tar.gz ${{ env.METEOR_BUNDLE }}
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            ${{ env.METEOR_BUNDLE }}
            .dockerignore
            Dockerfile
            docker-compose.yaml
            .env.mongo.template
            .env.recorder.template
            meteor-recorder.service
            README.md
            LICENSE
          if-no-files-found: error

  release:
    name: Release artifacts
    runs-on: ubuntu-20.04
    needs: [build-meteor-bundle]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: artifacts

      - name: Prepare Release Assets
        run: |
          zip --junk-paths artifacts.zip * .*
        shell: bash

      - name: Retrieve UPLOAD_URL
        id: get_upload_url
        run: |
          TAG=$(echo ${{ github.ref }} | cut -d'/' -f 3)
          REPO=${{ github.repository }}
          upload_url=$(curl -sL https://api.github.com/repos/${REPO}/releases/tags/${TAG} | jq -r '.upload_url')
          echo ::set-output name=UPLOAD_URL::$upload_url
        shell: bash

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: artifacts.zip
          asset_name: artifacts.zip
          asset_content_type: application/zip

  docker-image:
    name: Build and publish Docker Image
    runs-on: ubuntu-20.04
    needs: [build-meteor-bundle]
    steps:
      - name: Download bundle Artifact
        uses: actions/download-artifact@v2
        with:
          name: artifacts

      - name: Get the latest tag
        id: get_tag
        run: |
          TAG=$(echo ${{ github.ref }} | cut -d'/' -f 3)
          echo ::set-output name=tag::$TAG
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          build-args: |
            BUNDLE=${{ env.METEOR_BUNDLE }}
          push: true
          tags: |
            ${{ github.repository }}:latest
            ${{ github.repository }}:${{ steps.get_tag.outputs.tag }}

