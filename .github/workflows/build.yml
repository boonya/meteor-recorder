name: "Meteor Bundle and Docker Image"

on:
  push:
    tags:
      - "*"
    branches:
      - main
      - build-*

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  bundle:
    name: Build Meteor bundle üì¶
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Define metadata
        id: definitions
        run: |
          METEOR=$(cat .meteor/release | awk -F'@' '{print $2}')
          echo ::set-output name=meteor::${METEOR}

          VERSION=$(cat package.json | jq -r '.version')
          echo ::set-output name=version::${VERSION}

          HASH="${GITHUB_SHA}"
          echo ::set-output name=tag::${HASH}

          BUNDLE=${{ github.event.repository.name }}-${HASH}.tar.gz
          echo ::set-output name=bundle::${BUNDLE}

          META=$( jq -n \
            --arg meteor ${METEOR} \
            --arg version ${VERSION} \
            --arg hash ${HASH} \
            --arg bundle ${BUNDLE} \
            '{"meteor": $meteor, "version": $version, "hash": $hash, "bundle": $bundle}'
          )
          echo ${META} > meta.json

      - uses: meteorengineer/setup-meteor@v1
        with:
          meteor-release: ${{ steps.definitions.outputs.meteor }}

      - run: meteor npm install
      - run: meteor build .
      - name: Rename bundle
        run: |
          mv ${{ github.event.repository.name }}.tar.gz ${{ steps.definitions.outputs.bundle }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            meta.json
            ${{ steps.definitions.outputs.bundle }}
            .dockerignore
            Dockerfile
            docker-compose.yaml
            .env.mongo.template
            .env.recorder.template
            meteor-recorder.service
            README.md
            LICENSE
          if-no-files-found: error

  docker:
    name: Build Docker Image üê≥
    runs-on: ubuntu-20.04
    needs: [bundle]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifacts

      - name: Define metadata
        id: meta
        run: |
          VERSION=$(cat meta.json | jq -r '.version')
          echo ::set-output name=version::${VERSION}

          HASH=$(cat meta.json | jq -r '.hash')
          echo ::set-output name=hash::${HASH}

          BUNDLE=$(cat meta.json | jq -r '.bundle')
          echo ::set-output name=bundle::${BUNDLE}

          TAGS="${{ env.IMAGE_NAME }}:${HASH},${{ env.IMAGE_NAME }}:${GITHUB_REF_NAME}"
          echo ::set-output name=tags::${TAGS}

          IMAGE_TAR="docker-${{ github.event.repository.name }}-${{ steps.meta.outputs.hash }}.tar"
          echo ::set-output name=image_tar::${IMAGE_TAR}

          echo "bundle name: ${BUNDLE}"
          echo "hash: ${HASH}"
          echo "version: ${VERSION}"
          echo "tags: ${TAGS}"
          echo "tags: ${IMAGE_TAR}"

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        id: docker
        with:
          context: .
          build-args: |
            BUNDLE=${{ steps.meta.outputs.bundle }}
          platforms: linux/amd64, linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=docker,dest=${{ github.event.repository.image_tar }}

      - name: "Check what we have"
        run: |
          echo "imageid: ${{ steps.docker.outputs.imageid }}"
          echo "digest: ${{ steps.docker.outputs.digest }}"
          echo "metadata: ${{ steps.docker.outputs.metadata }}"
          ls -alh .

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            meta.json
            ${{ steps.definitions.outputs.bundle }}
            ${{ github.event.repository.image_tar }}
            .dockerignore
            Dockerfile
            docker-compose.yaml
            .env.mongo.template
            .env.recorder.template
            meteor-recorder.service
            README.md
            LICENSE
          if-no-files-found: error

  publish:
    name: Publish Docker Image üöÄ
    runs-on: ubuntu-20.04
    needs: [docker]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifacts

      - name: Define metadata
        id: meta
        run: |
          VERSION=$(cat meta.json | jq -r '.version')
          echo ::set-output name=version::${VERSION}

          HASH=$(cat meta.json | jq -r '.hash')
          echo ::set-output name=hash::${HASH}

          BUNDLE=$(cat meta.json | jq -r '.bundle')
          echo ::set-output name=bundle::${BUNDLE}

          TAGS="${{ env.IMAGE_NAME }}:${HASH},${{ env.IMAGE_NAME }}:${GITHUB_REF_NAME}"
          if [[ $GITHUB_REF == ref/head/main ]]; then
            TAGS="${TAGS},${{ env.IMAGE_NAME }}:${VERSION},${{ env.IMAGE_NAME }}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

          echo "bundle name: ${BUNDLE}"
          echo "hash: ${HASH}"
          echo "version: ${VERSION}"
          echo "tags: ${TAGS}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN_RW }}
          # with:
          #   username: ${{ secrets.DOCKERHUB_USERNAME }}
          #   password: ${{ secrets.DOCKERHUB_TOKEN }}
