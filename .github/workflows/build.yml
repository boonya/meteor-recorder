name: "Build and publish üè≠"

on:
  workflow_call:
  push:
    tags:
      - "*"
    branches:
      - main
      - build-*

env:
  GHCR_IMAGE: "ghcr.io/${{ github.repository }}"

jobs:
  bundle:
    name: Meteor Bundle üì¶
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Define metadata
        id: meta
        run: |
          METEOR=$(cat .meteor/release | awk -F'@' '{print $2}')
          echo ::set-output name=meteor::${METEOR}

          NAME=$(cat package.json | jq -r '.name')
          echo ::set-output name=name::${NAME}
          DESCRIPTION=$(cat package.json | jq -r '.description')
          echo ::set-output name=description::${DESCRIPTION}
          LICENSE=$(cat package.json | jq -r '.license')
          echo ::set-output name=license::${LICENSE}
          REPOSITORY=$(cat package.json | jq -r '.repository')
          echo ::set-output name=repository::${REPOSITORY}
          VERSION=$(cat package.json | jq -r '.version')
          echo ::set-output name=version::${VERSION}

          HASH="${GITHUB_SHA}"
          echo ::set-output name=tag::${HASH}

          BUNDLE=${{ github.event.repository.name }}-${HASH}.tar.gz
          echo ::set-output name=bundle::${BUNDLE}

          META=$( jq -n \
            --arg meteor "${METEOR}" \
            --arg name "${NAME}" \
            --arg description "${DESCRIPTION}" \
            --arg license "${LICENSE}" \
            --arg repository "${REPOSITORY}" \
            --arg version "${VERSION}" \
            --arg hash "${HASH}" \
            --arg bundle "${BUNDLE}" \
            '{
              "meteor": $meteor,
              "name": $name,
              "description": $description,
              "license": $license,
              "repository": $repository,
              "version": $version,
              "hash": $hash,
              "bundle": $bundle
            }'
          )
          echo ${META} > meta.json

          echo "meteor version: ${METEOR}"
          echo "package version: ${VERSION}"
          echo "package name: ${NAME}"
          echo "package description: ${DESCRIPTION}"
          echo "hash: ${HASH}"
          echo "bundle name: ${BUNDLE}"

      - uses: meteorengineer/setup-meteor@v1
        with:
          meteor-release: ${{ steps.meta.outputs.meteor }}

      - run: meteor npm install
      - run: meteor build .
      - name: Rename bundle
        run: |
          mv ${{ github.event.repository.name }}.tar.gz ${{ steps.meta.outputs.bundle }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            meta.json
            ${{ steps.meta.outputs.bundle }}
            .dockerignore
            Dockerfile
            mongo/initdb.d
            docker-compose.yaml
            .env.mongo.template
            .env.recorder.template
            meteor-recorder.service
            README.md
            LICENSE
          if-no-files-found: error

  docker:
    name: Docker Image üê≥
    runs-on: ubuntu-20.04
    needs: [bundle]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifacts

      - name: Define metadata
        id: meta
        run: |
          VERSION=$(cat meta.json | jq -r '.version')
          echo ::set-output name=version::${VERSION}

          BUNDLE=$(cat meta.json | jq -r '.bundle')
          echo ::set-output name=bundle::${BUNDLE}

          HASH=$(cat meta.json | jq -r '.hash')
          echo ::set-output name=hash::${HASH}

          CREATED=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=created::${CREATED}

          TAGS="${{ env.GHCR_IMAGE }}:${HASH},${{ env.GHCR_IMAGE }}:${GITHUB_REF_NAME}"
          echo ::set-output name=tags::${TAGS}

          echo "package version: ${VERSION}"
          echo "bundle name: ${BUNDLE}"
          echo "hash: ${HASH}"
          echo "tags: ${TAGS}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN_RW }}

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            BUNDLE=${{ steps.meta.outputs.bundle }}
            TITLE=${{ steps.meta.outputs.name }}
            DESCRIPTION=${{ steps.meta.outputs.description }}
            LICENSES=${{ steps.meta.outputs.license }}
            SOURCE=${{ steps.meta.outputs.repository }}
            VERSION=${{ steps.meta.outputs.version }}
            REVISION=${{ steps.meta.outputs.hash }}
            CREATED=${{ steps.meta.outputs.created }}
          platforms: linux/amd64, linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          push: true
