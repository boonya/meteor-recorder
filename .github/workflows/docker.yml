name: "[Test] Build and release meteor bundle üì¶ and Docker Image üê≥"

on:
  push:
  release:
    types: [published]

env:
  REGISTRY: hub.docker.com
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build JavaScript bundle üì¶
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Define versions
        id: versions
        run: |
          BUNDLE=$(cat package.json | jq -r '.version')
          METEOR=$(cat .meteor/release | awk -F'@' '{print $2}')

          echo ::set-output name=bundle::${BUNDLE}
          echo ::set-output name=meteor::${METEOR}

      - uses: meteorengineer/setup-meteor@v1
        with:
          meteor-release: ${{ steps.versions.outputs.meteor }}

      - run: meteor npm install
      - run: meteor build .
      - name: Rename bundle
        id: bundle
        run: |
          NAME=${{ github.event.repository.name }}-${{ steps.versions.outputs.bundle }}.tar.gz
          echo ::set-output name=name::${NAME}
          mv ${{ github.event.repository.name }}.tar.gz ${NAME}
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            ${{ steps.bundle.outputs.name }}
            .dockerignore
            Dockerfile
            docker-compose.yaml
            .env.mongo.template
            .env.recorder.template
            meteor-recorder.service
            README.md
            LICENSE
          if-no-files-found: error

  docker:
    name: Build and publish Docker Image üê≥
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Check what we have
        run: |
          echo "tags: ${{ steps.meta.outputs.tags }}"
          echo "labels: ${{ steps.meta.outputs.labels }}"

      - uses: actions/download-artifact@v3
        with:
          name: artifacts

      - name: Check what we have
        run: |
          ls -alh .
          echo "bundle name: ${{ steps.bundle.outputs.name }}"
          echo "bundle version: ${{ steps.versions.outputs.bundle }}"

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          build-args: |
            BUNDLE=${{ steps.bundle.outputs.name }}
          push: true
          # labels: ${{ steps.meta.outputs.labels }}
          # tags: ${{ steps.meta.outputs.tags }}
          # tags: test
          tags: |
            ${{ env.IMAGE_NAME }}:test
            ${{ env.IMAGE_NAME }}:${{ steps.versions.outputs.bundle }}
